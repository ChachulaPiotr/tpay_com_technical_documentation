/**
 * Tpay.com Technical Documentation
 *  <p class=\"changes-disclaimer\"> Demo transaction/masspayments api key: <input type=\"text\" id=\"transaction_key\" value=\"75f86137a6635df826e3efe2e66f7c9a946fdde1\" class=\"ui-form-control\"/><label for=\"transaction_key\" style=\"display: none;\" id=\"tr_api_label\">COPIED!</label><br/><br/> Demo cards api key: <input type=\"text\" id=\"cards_key\" value=\"ba9a05faa697f9b43f39b84933ff168e373c6496\" class=\"ui-form-control\"/><label for=\"cards_key\" style=\"display: none;\" id=\"cards_api_label\">COPIED!</label><br/><br/> Demo registration api key: <input type=\"text\" id=\"registration_key\" value=\"6c0f5ef6e4d6877abad7fcfb3b5de117ad8b772d\" class=\"ui-form-control\"/><label for=\"registration_key\" style=\"display: none;\" id=\"registration_api_label\">COPIED!</label><br/><br/> The terms seller and merchant are used interchangeably and they both refer to a person or a company registered at tpay.com to accept online payments. <br/> Whenever term merchant panel is used it refers to the part of tpay.com website located at <a href=\"https://secure.tpay.com/panel\" target=\"_blank\">secure.tpay.com/panel</a>. <br/><br/> For sandbox purposes use merchant demo account <br/><br/> ID - 1010, Password - demo<br/><br/>Remember that this is a shared account, so all data passed through will be publicly visible.</p>
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: pt@tpay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BlikFields from '../model/BlikFields';
import BlikResponse from '../model/BlikResponse';
import CreateFields from '../model/CreateFields';
import CreateResponse from '../model/CreateResponse';
import GetFields from '../model/GetFields';
import GetResponse from '../model/GetResponse';
import RefundAnyFields from '../model/RefundAnyFields';
import RefundAnyResponse from '../model/RefundAnyResponse';
import RefundStatusResponse from '../model/RefundStatusResponse';
import RefundTransactionFields from '../model/RefundTransactionFields';
import ReportFields from '../model/ReportFields';
import ReportResponse from '../model/ReportResponse';

/**
* TransactionAPI service.
* @module api/TransactionAPIApi
* @version 1.2.0
*/
export default class TransactionAPIApi {

    /**
    * Constructs a new TransactionAPIApi. 
    * @alias module:api/TransactionAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiGwApiKeyChargebackAnyPost operation.
     * @callback module:api/TransactionAPIApi~apiGwApiKeyChargebackAnyPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefundAnyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * any
     * The method used to refund part of the transaction amount. <br/><br/><b>NOTICE:</b> This method works only in production mode!<br/>To test this method, you need to create the transaction in production mode with your own API access.
     * @param {String} apiKey The api key.
     * @param {Object} opts Optional parameters
     * @param {module:model/RefundAnyFields} opts.refundAnyData Request body.
     * @param {module:api/TransactionAPIApi~apiGwApiKeyChargebackAnyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RefundAnyResponse}
     */
    apiGwApiKeyChargebackAnyPost(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['refundAnyData'];
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling apiGwApiKeyChargebackAnyPost");
      }

      let pathParams = {
        'api_key': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = RefundAnyResponse;
      return this.apiClient.callApi(
        '/api/gw/{api_key}/chargeback/any', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiGwApiKeyChargebackStatusPost operation.
     * @callback module:api/TransactionAPIApi~apiGwApiKeyChargebackStatusPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefundStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * status
     * The method used to check transaction refunds statuses.<br/>Some refunds statuses may be not available immediately after calling refund methods due to gathering refund details process.
     * @param {String} apiKey The api key.
     * @param {Object} opts Optional parameters
     * @param {module:model/RefundTransactionFields} opts.refundTransactionData Request body.
     * @param {module:api/TransactionAPIApi~apiGwApiKeyChargebackStatusPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RefundStatusResponse}
     */
    apiGwApiKeyChargebackStatusPost(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['refundTransactionData'];
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling apiGwApiKeyChargebackStatusPost");
      }

      let pathParams = {
        'api_key': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = RefundStatusResponse;
      return this.apiClient.callApi(
        '/api/gw/{api_key}/chargeback/status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiGwApiKeyChargebackTransactionPost operation.
     * @callback module:api/TransactionAPIApi~apiGwApiKeyChargebackTransactionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefundAnyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * transaction
     * The method used to refund full transaction amount. You can get transaction title from 'create' method when generating the transaction.<br/><br/><b>NOTICE:</b> This method works only in production mode!<br/>To test this method, you need to create the transaction in production mode with your own API access.
     * @param {String} apiKey The api key.
     * @param {Object} opts Optional parameters
     * @param {module:model/RefundTransactionFields} opts.refundTransactionData Request body.
     * @param {module:api/TransactionAPIApi~apiGwApiKeyChargebackTransactionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RefundAnyResponse}
     */
    apiGwApiKeyChargebackTransactionPost(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['refundTransactionData'];
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling apiGwApiKeyChargebackTransactionPost");
      }

      let pathParams = {
        'api_key': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = RefundAnyResponse;
      return this.apiClient.callApi(
        '/api/gw/{api_key}/chargeback/transaction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiGwApiKeyTransactionBlikPost operation.
     * @callback module:api/TransactionAPIApi~apiGwApiKeyTransactionBlikPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlikResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * blik
     * This method allows sending a BLIK code in direct communication between merchant and BLIK system. In ‘create’ method you should set 150 as a value for parameter ‘group’, this is a BLIK payment channel. Method returns parameter ‘result’ equal to 1 which means that payment popup has been successfully displayed at customer mobile application. After accepting payment by the customer, tpay.com system sends a standard notification to merchant's endpoint declared in wyn_url parameter (this parameter should be sent in 'create' method.)<br/><br/><b>NOTICE:</b> to test this method, you need to create the transaction with 'create' method and replace title parameter value with the returned title.<br/>Blik method works with the specific set of parameters depending on payment type case. Please see BLIK workflow section.
     * @param {String} apiKey The api key.
     * @param {Object} opts Optional parameters
     * @param {module:model/BlikFields} opts.blikData Request body.
     * @param {module:api/TransactionAPIApi~apiGwApiKeyTransactionBlikPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlikResponse}
     */
    apiGwApiKeyTransactionBlikPost(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['blikData'];
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling apiGwApiKeyTransactionBlikPost");
      }

      let pathParams = {
        'api_key': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = BlikResponse;
      return this.apiClient.callApi(
        '/api/gw/{api_key}/transaction/blik', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiGwApiKeyTransactionCreatePost operation.
     * @callback module:api/TransactionAPIApi~apiGwApiKeyTransactionCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create
     * This method allows you to prepare transaction for a customer. The method returns transaction title required for other API methods and redirection link for a customer.<br/>This method also returns account details for manual money transfers.
     * @param {String} apiKey The api key.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateFields} opts.basicData Transaction data.
     * @param {module:api/TransactionAPIApi~apiGwApiKeyTransactionCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateResponse}
     */
    apiGwApiKeyTransactionCreatePost(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['basicData'];
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling apiGwApiKeyTransactionCreatePost");
      }

      let pathParams = {
        'api_key': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = CreateResponse;
      return this.apiClient.callApi(
        '/api/gw/{api_key}/transaction/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiGwApiKeyTransactionGetPost operation.
     * @callback module:api/TransactionAPIApi~apiGwApiKeyTransactionGetPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get
     * This method allows you to get all information about the transaction by sending previously generated title.
     * @param {String} apiKey The api key.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetFields} opts.getData Request body.
     * @param {module:api/TransactionAPIApi~apiGwApiKeyTransactionGetPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetResponse}
     */
    apiGwApiKeyTransactionGetPost(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['getData'];
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling apiGwApiKeyTransactionGetPost");
      }

      let pathParams = {
        'api_key': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = GetResponse;
      return this.apiClient.callApi(
        '/api/gw/{api_key}/transaction/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiGwApiKeyTransactionReportPost operation.
     * @callback module:api/TransactionAPIApi~apiGwApiKeyTransactionReportPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * report
     * This method returns payments report for the declared time range, generated in CSV format (semicolon separators) and encoded in base64 - the same format as in merchant panel. If you like to arrange result as an associative array, you can use the ready <a href=\"https://github.com/tpay-com/tpay-php/blob/master/tpayLibs/examples/TransactionReportsApi.php\" target=\"_blank\">script</a> from Tpay PHP library.
     * @param {String} apiKey The api key.
     * @param {Object} opts Optional parameters
     * @param {module:model/ReportFields} opts.reportData Request body.
     * @param {module:api/TransactionAPIApi~apiGwApiKeyTransactionReportPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportResponse}
     */
    apiGwApiKeyTransactionReportPost(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['reportData'];
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling apiGwApiKeyTransactionReportPost");
      }

      let pathParams = {
        'api_key': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ReportResponse;
      return this.apiClient.callApi(
        '/api/gw/{api_key}/transaction/report', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
