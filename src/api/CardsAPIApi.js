/**
 * Tpay.com Technical Documentation
 *  <p class=\"changes-disclaimer\"> Demo transaction/masspayments api key: <input type=\"text\" id=\"transaction_key\" value=\"75f86137a6635df826e3efe2e66f7c9a946fdde1\" class=\"ui-form-control\"/><label for=\"transaction_key\" style=\"display: none;\" id=\"tr_api_label\">COPIED!</label><br/><br/> Demo cards api key: <input type=\"text\" id=\"cards_key\" value=\"ba9a05faa697f9b43f39b84933ff168e373c6496\" class=\"ui-form-control\"/><label for=\"cards_key\" style=\"display: none;\" id=\"cards_api_label\">COPIED!</label><br/><br/> Demo registration api key: <input type=\"text\" id=\"registration_key\" value=\"6c0f5ef6e4d6877abad7fcfb3b5de117ad8b772d\" class=\"ui-form-control\"/><label for=\"registration_key\" style=\"display: none;\" id=\"registration_api_label\">COPIED!</label><br/><br/> The terms seller and merchant are used interchangeably and they both refer to a person or a company registered at tpay.com to accept online payments. <br/> Whenever term merchant panel is used it refers to the part of tpay.com website located at <a href=\"https://secure.tpay.com/panel\" target=\"_blank\">secure.tpay.com/panel</a>. <br/><br/> For sandbox purposes use merchant demo account <br/><br/> ID - 1010, Password - demo<br/><br/>Remember that this is a shared account, so all data passed through will be publicly visible.</p>
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: pt@tpay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CheckFields from '../model/CheckFields';
import CheckResponse from '../model/CheckResponse';
import DeregisterFields from '../model/DeregisterFields';
import PresaleFields from '../model/PresaleFields';
import RefundFields from '../model/RefundFields';
import RefundResponse from '../model/RefundResponse';
import RegisterSaleFields from '../model/RegisterSaleFields';
import RegisterSaleResponse from '../model/RegisterSaleResponse';
import SaleFields from '../model/SaleFields';
import SaleResponse from '../model/SaleResponse';
import SecuresaleFields from '../model/SecuresaleFields';
import SecuresaleResponse from '../model/SecuresaleResponse';
import VcFinishFields from '../model/VcFinishFields';
import VcPrepareFields from '../model/VcPrepareFields';
import VcPrepareResponse from '../model/VcPrepareResponse';

/**
* CardsAPI service.
* @module api/CardsAPIApi
* @version 1.2.0
*/
export default class CardsAPIApi {

    /**
    * Constructs a new CardsAPIApi. 
    * @alias module:api/CardsAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiCardsApiKeyCheckPost operation.
     * @callback module:api/CardsAPIApi~apiCardsApiKeyCheckPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * check
     * Method, which can be used to ping our API server to establish a monitoring service on the Merchant system.
     * @param {String} apiKey The api key.
     * @param {Object} opts Optional parameters
     * @param {module:model/CheckFields} opts.basicData check method data
     * @param {module:api/CardsAPIApi~apiCardsApiKeyCheckPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckResponse}
     */
    apiCardsApiKeyCheckPost(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['basicData'];
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling apiCardsApiKeyCheckPost");
      }

      let pathParams = {
        'api_key': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = CheckResponse;
      return this.apiClient.callApi(
        '/api/cards/{api_key}/check', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCardsApiKeyDeregisterPost operation.
     * @callback module:api/CardsAPIApi~apiCardsApiKeyDeregisterPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deregister
     * The method used to deregister client credit card token from Tpay and Merchant system.<br/>A client can also do it himself from the link in an email after payment.<br/><br/>After successful deregistration Merchant will not be able anymore to charge client's card. Tpay system sends notification about this deregistration to merchant endpoint, defined in merchant panel settings.<br/><br/><b>NOTICE:</b> To test this method you need to generate client token and calculate sign with your own API access data.
     * @param {String} apiKey The api key.
     * @param {Object} opts Optional parameters
     * @param {module:model/DeregisterFields} opts.basicData Transaction data.
     * @param {module:api/CardsAPIApi~apiCardsApiKeyDeregisterPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiCardsApiKeyDeregisterPost(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['basicData'];
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling apiCardsApiKeyDeregisterPost");
      }

      let pathParams = {
        'api_key': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/cards/{api_key}/deregister', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCardsApiKeyPresalePost operation.
     * @callback module:api/CardsAPIApi~apiCardsApiKeyPresalePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterSaleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * presale
     * The method used to create a new sale for payment on demand. It can be called after receiving a notification with client registered token (cli_auth parameter). It can not be used if 'onetimer' parameter was sent in register_sale or client has unregistered (by the link in an email sent by tpay.com after registering clientâ€™s credit card or by API).<br/><br/><b>Additional information</b> Please feel free to read detailed case study of <a href=\"https://support.tpay.com/en/case-study/wdrozenie-platnosci-rekurencyjnych-cyklicznych\" target=\"_blank\">Implementation of the recurrent payments</a>
     * @param {String} apiKey The api key.
     * @param {Object} opts Optional parameters
     * @param {module:model/PresaleFields} opts.basicData Transaction data.
     * @param {module:api/CardsAPIApi~apiCardsApiKeyPresalePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterSaleResponse}
     */
    apiCardsApiKeyPresalePost(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['basicData'];
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling apiCardsApiKeyPresalePost");
      }

      let pathParams = {
        'api_key': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = RegisterSaleResponse;
      return this.apiClient.callApi(
        '/api/cards/{api_key}/presale', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCardsApiKeyRefundPost operation.
     * @callback module:api/CardsAPIApi~apiCardsApiKeyRefundPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefundResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * refund
     * The method used to transfer money back to the client. The refund can reference to chosen sale (sale_auth) or directly to the client (cli_auth).<br/><br/> In both cases, the amount is adjustable in parameter amount. If the only cli_auth is sent, the amount parameter is required. If sale_auth is passed amount and currency are not necessary - the system will take default values from the specified sale and make a full amount refund.<br/>If you pass the amount parameter and specific sale_auth, you can create more than one refund until the sum of all refunds reach the transaction amount. <br><br/> In test mode this method has 50% probability of success and the status parameter is picked randomly. <br/>
     * @param {String} apiKey The api key.
     * @param {Object} opts Optional parameters
     * @param {module:model/RefundFields} opts.basicData Transaction data.
     * @param {module:api/CardsAPIApi~apiCardsApiKeyRefundPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RefundResponse}
     */
    apiCardsApiKeyRefundPost(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['basicData'];
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling apiCardsApiKeyRefundPost");
      }

      let pathParams = {
        'api_key': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = RefundResponse;
      return this.apiClient.callApi(
        '/api/cards/{api_key}/refund', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCardsApiKeyRegisterSalePost operation.
     * @callback module:api/CardsAPIApi~apiCardsApiKeyRegisterSalePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterSaleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * register sale
     * The method used to create sale initialisation in tpay.com system. The successful request returns sale_auth used to redirect a client to transaction panel. <br><br>The parameter sale_auth can be used to redirect a client to payment transaction panel:  <br> <b> https://secure.tpay.com/cards/ </b><br> with argument sale_auth passed with the POST or GET method. <br><br> <b>Test mode notice!</b><br> In test mode, the transaction panel offers multiple system answers. You can choose at the transaction panel (instead of making a real transaction) to accept or decline payment to test all paths. In production mode client will be directly redirected to payment gateway with credit card data form. <br> Notification about positive transaction status will be sent to result URL which is set in account settings. 
     * @param {String} apiKey The api key.
     * @param {Object} opts Optional parameters
     * @param {module:model/RegisterSaleFields} opts.basicData Transaction data.
     * @param {module:api/CardsAPIApi~apiCardsApiKeyRegisterSalePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterSaleResponse}
     */
    apiCardsApiKeyRegisterSalePost(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['basicData'];
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling apiCardsApiKeyRegisterSalePost");
      }

      let pathParams = {
        'api_key': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = RegisterSaleResponse;
      return this.apiClient.callApi(
        '/api/cards/{api_key}/register_sale', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCardsApiKeySalePost operation.
     * @callback module:api/CardsAPIApi~apiCardsApiKeySalePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SaleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * sale
     * The method used to execute created sale with presale method. Sale defined with sale_auth can be executed only once. If the method is called second time with the same parameters, the system returns actual sale status - in parameter status - done for correct payment and declined for rejected payment. In that case, client card is not charged the second time. <br><br> Passed cli_auth has to match with cli_auth used while creating a sale in presale method. <br><br><b>Test mode notice!</b> The method will return correct status with 50% probability. The same concerns declined status. In this case, reason value is also randomly picked.
     * @param {String} apiKey The api key.
     * @param {Object} opts Optional parameters
     * @param {module:model/SaleFields} opts.basicData Transaction data.
     * @param {module:api/CardsAPIApi~apiCardsApiKeySalePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SaleResponse}
     */
    apiCardsApiKeySalePost(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['basicData'];
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling apiCardsApiKeySalePost");
      }

      let pathParams = {
        'api_key': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = SaleResponse;
      return this.apiClient.callApi(
        '/api/cards/{api_key}/sale', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCardsApiKeySecuresalePost operation.
     * @callback module:api/CardsAPIApi~apiCardsApiKeySecuresalePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecuresaleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * secure sale
     *  This method allows Merchant to host payment form on his website and perform sale without any client redirection to tpay.com  system. Securesale method supports 3D Secure validation which is an additional security layer for online credit and debit card transactions. This approach requires special security considerations. We support secure communication by encrypting card data (card number, validity date and cvv/cvs number) on the client side (javascript) with Merchant public RSA key and send it as one parameter (card) to our API gate. A valid SSL certificate on the Merchant domain is required. Application flow is presented below for clarification:<br/><br/> 1. Generate webpage with your public RSA key in javascript<br/> 2. Before sending payment form, insert new input with encrypted card data using your public key and clear inputs with card data so only encrypted data will be sent and submit form. <br/> 3. In backend prepare parameters and send them with securesale method  <br/> 4. Inform client about payment result<br/> <br/> Card cypher is made from string<br/><br/> card number|expiry date(MM/YY or MM/YYYY)|cvv or cvc|host  <br/><br/> eg. \"1234567891234567|05/17|123|https://merchantwebsite.com\"  <br/><br/> We have published code samples, libraries and instructions to give some insights on the process - see https://github.com/tpay-com/tpay-php . The library used in the example has a limit of 117 input characters for encryption.  <br/> <b>In production mode, this generated hash works only once and should always be generated even for the same card data.</b><br/><br/> There are two ways for performing payment<br/><br/> a)  <b>Pay by card without  3D- Secure.</b> <br/> If input parameters are correct, request is processed correctly and the entered card does not have the 3D-Secure option enabled, method returns parameters in JSON format<br/><br/> b)  <b>Pay by card with 3D-Secure.</b> <br/>If input parameters are correct, the request is processed correctly and the card has enabled the 3D-Secure, the method returns the 3ds_url parameter in JSON format. <br/><br/> An example 3ds URL is presented below <br/><br/> https://secure.tpay.com/cards/?sale_auth=2587bf3a98dfa699ef9d01eba38359b7 <br/><br/> â€¢  The best way to implement 3DS is to open a link to 3D-Secure authentication in a new window. If this method is used, parameter \"enable_pow_url\"  should be sent with value 1.  After a correct authorization, a customer will be redirected to the Merchantâ€™s Site. Return URL is set in Merchantâ€™s Panel or sent dynamically. <br/><br/> â€¢  Do not use an inline frame to implement the 3D-Secure authentication on Merchantâ€™s Site. In this case, some banks can block 3DS authorisation. <br/><br/> The parameters are sent with POST method. Merchant system has to respond to the notification by printing array in JSON format.<br/> See Card's notifications section.<br/><br/> <b>Test mode notice!</b>  <br/>In test mode, transaction panel offers the choice of system answer for transactions with 3D-Secure authentication. You can choose to accept or decline payment to test all paths.<br/><br/><b>Additional information</b> Please feel free to read detailed case study of <a href=\"https://support.tpay.com/en/case-study/wdrozenie-bramki-platnosci-kartami-na-stronie-sklepu\" target=\"_blank\">Implementation of the card payment gateway at the store's website<a/>
     * @param {String} apiKey The api key.
     * @param {Object} opts Optional parameters
     * @param {module:model/SecuresaleFields} opts.basicData Transaction data.
     * @param {module:api/CardsAPIApi~apiCardsApiKeySecuresalePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecuresaleResponse}
     */
    apiCardsApiKeySecuresalePost(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['basicData'];
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling apiCardsApiKeySecuresalePost");
      }

      let pathParams = {
        'api_key': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = SecuresaleResponse;
      return this.apiClient.callApi(
        '/api/cards/{api_key}/securesale', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCardsApiKeyVisacheckoutFinishPost operation.
     * @callback module:api/CardsAPIApi~apiCardsApiKeyVisacheckoutFinishPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecuresaleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * visacheckout finish
     * The Method used to finish Visa Checkout payment. <br/><br/> Summary_data has format compliant with Visa Checkout Summary Payment Data. Its structure is described in Visa Checkout documentation at <a href=\"https://developer.visa.com/products/visa_checkout/guides#extracting-consumer-data\">extracting-consumer-data</a><br><br/> The example table with this format can be found at <a href=\"https://developer.visa.com/capabilities/visa_checkout/docs#pdfs_for_merchants_integrating_with_visa_checkout\">Link</a> <br><br>When some data change between visacheckout_prepare and visacheckout_finish, you should send the modified data with the summary_data table. You can only send to tpay.com the data, which changes (i.e. only the amount ) but you need to send it in the summary_data JSON structure. <br/>Other fields if not changed donâ€™t have to be sent.<br/> The response format is the same as in SecureSale method - see the method for more details.<br/><br/><b>NOTICE:</b> To use Visa Checkout methods, you need to have access to cards API at your account and pass Visa requirements (see Visa Checkout Integration section).
     * @param {String} apiKey The api key.
     * @param {Object} opts Optional parameters
     * @param {module:model/VcFinishFields} opts.basicData Transaction data.
     * @param {module:api/CardsAPIApi~apiCardsApiKeyVisacheckoutFinishPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecuresaleResponse}
     */
    apiCardsApiKeyVisacheckoutFinishPost(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['basicData'];
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling apiCardsApiKeyVisacheckoutFinishPost");
      }

      let pathParams = {
        'api_key': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = SecuresaleResponse;
      return this.apiClient.callApi(
        '/api/cards/{api_key}/visacheckout_finish', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCardsApiKeyVisacheckoutPreparePost operation.
     * @callback module:api/CardsAPIApi~apiCardsApiKeyVisacheckoutPreparePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VcPrepareResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * visacheckout prepare
     * The method used to prepare Visa Checkout payment. <br/><br/><b>NOTICE:</b> To use Visa Checkout methods, you need to have access to cards API at your account and pass Visa requirements (see Visa Checkout Integration section).
     * @param {String} apiKey The api key.
     * @param {Object} opts Optional parameters
     * @param {module:model/VcPrepareFields} opts.basicData Transaction data.
     * @param {module:api/CardsAPIApi~apiCardsApiKeyVisacheckoutPreparePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VcPrepareResponse}
     */
    apiCardsApiKeyVisacheckoutPreparePost(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['basicData'];
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling apiCardsApiKeyVisacheckoutPreparePost");
      }

      let pathParams = {
        'api_key': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = VcPrepareResponse;
      return this.apiClient.callApi(
        '/api/cards/{api_key}/visacheckout_prepare', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
