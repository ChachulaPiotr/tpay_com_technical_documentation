/**
 * Tpay.com Technical Documentation
 *  <p class=\"changes-disclaimer\"> Demo transaction/masspayments api key: <input type=\"text\" id=\"transaction_key\" value=\"75f86137a6635df826e3efe2e66f7c9a946fdde1\" class=\"ui-form-control\"/><label for=\"transaction_key\" style=\"display: none;\" id=\"tr_api_label\">COPIED!</label><br/><br/> Demo cards api key: <input type=\"text\" id=\"cards_key\" value=\"ba9a05faa697f9b43f39b84933ff168e373c6496\" class=\"ui-form-control\"/><label for=\"cards_key\" style=\"display: none;\" id=\"cards_api_label\">COPIED!</label><br/><br/> Demo registration api key: <input type=\"text\" id=\"registration_key\" value=\"6c0f5ef6e4d6877abad7fcfb3b5de117ad8b772d\" class=\"ui-form-control\"/><label for=\"registration_key\" style=\"display: none;\" id=\"registration_api_label\">COPIED!</label><br/><br/> The terms seller and merchant are used interchangeably and they both refer to a person or a company registered at tpay.com to accept online payments. <br/> Whenever term merchant panel is used it refers to the part of tpay.com website located at <a href=\"https://secure.tpay.com/panel\" target=\"_blank\">secure.tpay.com/panel</a>. <br/><br/> For sandbox purposes use merchant demo account <br/><br/> ID - 1010, Password - demo<br/><br/>Remember that this is a shared account, so all data passed through will be publicly visible.</p>
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: pt@tpay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PaymentAttempts from './PaymentAttempts';
import Result from './Result';
import TransactionErrorCodes from './TransactionErrorCodes';

/**
 * The GetResponse model module.
 * @module model/GetResponse
 * @version 1.2.0
 */
class GetResponse {
    /**
     * Constructs a new <code>GetResponse</code>.
     * @alias module:model/GetResponse
     */
    constructor() { 
        
        GetResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetResponse} obj Optional instance to populate.
     * @return {module:model/GetResponse} The populated <code>GetResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetResponse();

            if (data.hasOwnProperty('result')) {
                obj['result'] = Result.constructFromObject(data['result']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('error_code')) {
                obj['error_code'] = ApiClient.convertToType(data['error_code'], 'String');
            }
            if (data.hasOwnProperty('start_time')) {
                obj['start_time'] = ApiClient.convertToType(data['start_time'], 'String');
            }
            if (data.hasOwnProperty('payment_time')) {
                obj['payment_time'] = ApiClient.convertToType(data['payment_time'], 'String');
            }
            if (data.hasOwnProperty('chargeback_time')) {
                obj['chargeback_time'] = ApiClient.convertToType(data['chargeback_time'], 'String');
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'Number');
            }
            if (data.hasOwnProperty('test_mode')) {
                obj['test_mode'] = ApiClient.convertToType(data['test_mode'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('amount_paid')) {
                obj['amount_paid'] = ApiClient.convertToType(data['amount_paid'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('err')) {
                obj['err'] = TransactionErrorCodes.constructFromObject(data['err']);
            }
            if (data.hasOwnProperty('paymentAttempts')) {
                obj['paymentAttempts'] = ApiClient.convertToType(data['paymentAttempts'], [PaymentAttempts]);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/Result} result
 */
GetResponse.prototype['result'] = undefined;

/**
 * @member {module:model/GetResponse.StatusEnum} status
 */
GetResponse.prototype['status'] = undefined;

/**
 * Depending on setting in merchant panel, error_code may be different than none for correct status, when acceptance of overpays and surcharges has been set.
 * @member {module:model/GetResponse.ErrorCodeEnum} error_code
 */
GetResponse.prototype['error_code'] = undefined;

/**
 * Transaction creation time
 * @member {String} start_time
 */
GetResponse.prototype['start_time'] = undefined;

/**
 * Date of payment or empty for pending transactions
 * @member {String} payment_time
 */
GetResponse.prototype['payment_time'] = undefined;

/**
 * Date of payment refund or empty for not refunded transactions
 * @member {String} chargeback_time
 */
GetResponse.prototype['chargeback_time'] = undefined;

/**
 * Payment channel ID can be recognised in merchant panel (your offer section)
 * @member {Number} channel
 */
GetResponse.prototype['channel'] = undefined;

/**
 * Returns 1 if transaction was in test mode
 * @member {module:model/GetResponse.TestModeEnum} test_mode
 */
GetResponse.prototype['test_mode'] = undefined;

/**
 * transaction amount casted to float
 * @member {Number} amount
 */
GetResponse.prototype['amount'] = undefined;

/**
 * The amount paid by customer
 * @member {Number} amount_paid
 */
GetResponse.prototype['amount_paid'] = undefined;

/**
 * customer name
 * @member {String} name
 */
GetResponse.prototype['name'] = undefined;

/**
 * customer email
 * @member {String} email
 */
GetResponse.prototype['email'] = undefined;

/**
 * customer address (parameter is empty if this field was not send with create method)
 * @member {String} address
 */
GetResponse.prototype['address'] = undefined;

/**
 * customer postal code (parameter is empty if this field was not send with create method)
 * @member {String} code
 */
GetResponse.prototype['code'] = undefined;

/**
 * customer city (parameter is empty if this field was not send with create method)
 * @member {String} city
 */
GetResponse.prototype['city'] = undefined;

/**
 * customer phone number (parameter is empty if this field was not send with create method)
 * @member {String} phone
 */
GetResponse.prototype['phone'] = undefined;

/**
 * Two letters - see ISO 3166-1 document
 * @member {String} country
 */
GetResponse.prototype['country'] = undefined;

/**
 * @member {module:model/TransactionErrorCodes} err
 */
GetResponse.prototype['err'] = undefined;

/**
 * List of payment attempts. Currently is returned only for BLIK payment method
 * @member {Array.<module:model/PaymentAttempts>} paymentAttempts
 */
GetResponse.prototype['paymentAttempts'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
GetResponse['StatusEnum'] = {

    /**
     * value: "correct"
     * @const
     */
    "correct": "correct",

    /**
     * value: "paid"
     * @const
     */
    "paid": "paid",

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "error"
     * @const
     */
    "error": "error",

    /**
     * value: "chargeback"
     * @const
     */
    "chargeback": "chargeback"
};


/**
 * Allowed values for the <code>error_code</code> property.
 * @enum {String}
 * @readonly
 */
GetResponse['ErrorCodeEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "overpay"
     * @const
     */
    "overpay": "overpay",

    /**
     * value: "surcharge"
     * @const
     */
    "surcharge": "surcharge"
};


/**
 * Allowed values for the <code>test_mode</code> property.
 * @enum {String}
 * @readonly
 */
GetResponse['TestModeEnum'] = {

    /**
     * value: "0"
     * @const
     */
    "0": "0",

    /**
     * value: "1"
     * @const
     */
    "1": "1"
};



export default GetResponse;

